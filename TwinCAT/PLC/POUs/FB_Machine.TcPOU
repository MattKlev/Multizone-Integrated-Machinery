<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Machine" Id="{477547fc-3ea9-469c-94c5-8bd12891e1bc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Machine
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	Mode				: E_Mode;
	Start 				: ST_LEDButton;
	rtStart				: R_TRIG;
	Stop 				: ST_LEDButton;
	rtStop				: R_TRIG;
	Reset 				: ST_LEDButton;
	rtReset				: R_TRIG;
	
	//Button LED
	StartLEDBlink	:BLINK;
	ResetLEDBlink	:BLINK;
	StopLEDBlink		:BLINK;

	TwinSAFEGroupErrAck	AT %Q*	: BOOL;
	TwinSAFEGroupState	AT %I*	: USINT;

	AxisInError			: BOOL; //One or more axis in error
	
	X_Axis				: AXIS_REF;
	Z_Axis				: AXIS_REF;
	fbCarrierReset		: FB_CarrierReset;
	
	fbCarrierStop		:FB_CarrierStop;

	StepToReturnToAfterStop		: E_Step;
	Step 						: E_Step;

	fbMoveCarrier		: FB_CarrierAbsMove;
	HomePosSetPoint		: ST_CarrierSetPoint	:= (X_Pos := 100, X_Velo := 500, Z_Pos := 100, Z_Velo := 800);
	APickPosSetPoint	: ST_CarrierSetPoint	:= (X_Pos := 290, X_Velo := 500, Z_Pos := 1100, Z_Velo := 800);
	BWaitPosSetpoint	: ST_CarrierSetPoint	:= (X_Pos := 600, X_Velo := 500, Z_Pos := 100, Z_Velo := 800);
	BPlacePosSetPoint	: ST_CarrierSetPoint	:= (X_Pos := 1000, X_Velo := 500, Z_Pos := 1200, Z_Velo := 800);
	BWorkPosSetPoint	: ST_CarrierSetPoint	:= (X_Pos := 1000, X_Velo := 500, Z_Pos := 100, Z_Velo := 800);
	BPickPosSetPoint	: ST_CarrierSetPoint	:= (X_Pos := 1000, X_Velo := 500, Z_Pos := 1200, Z_Velo := 800);
	CWaitPosSetPoint	: ST_CarrierSetPoint	:= (X_Pos := 1350, X_Velo := 500, Z_Pos := 100, Z_Velo := 800);
	CPlacePosSetPoint	: ST_CarrierSetPoint	:= (X_Pos := 1700, X_Velo := 500, Z_Pos := 1000, Z_Velo := 800);
	CWorkPosSetPoint	: ST_CarrierSetPoint	:= (X_Pos := 1800, X_Velo := 500, Z_Pos := 100, Z_Velo := 800);

	//Machine A
	WaitTimeForAToBeReady : TIME := T#1S;

	//Machine B
	WaitTimeForBtoBeReady	: TIME	:= T#1.5S;
	BDoingWorkTime			: TIME	:= T#2S;

	//Machine C
	WaitTimeForCtoBeReady	: TIME	:= T#0.5S;
	CDoingWorkTime			: TIME	:= T#750MS;

	//Machine D
	Machine_D_Carrier_Gripper AT %Q* : BIT;
END_VAR
VAR CONSTANT
	TwinSAFEGroupRun AT %Q* : BOOL := TRUE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[rtStart(CLK := Start.Button);
rtReset(CLK := Reset.Button);
rtStop(CLK := Stop.Button);


CASE Step OF
	E_Step.Init:
		fbMoveCarrier.X_AxisRef	:= ADR(X_Axis);
		fbMoveCarrier.Z_AxisRef	:= ADR(Z_Axis);
		fbMoveCarrier(Execute := FALSE);
		Machine_D_Carrier_Gripper := FALSE;

		fbCarrierReset(Execute := FALSE);
		fbCarrierReset.X_AxisRef	:= ADR(X_Axis);
		fbCarrierReset.Z_AxisRef	:= ADR(Z_Axis);
		
		fbCarrierStop(Execute:=FALSE);
		fbCarrierStop.X_AxisRef		:=ADR(X_Axis);
		fbCarrierStop.Z_AxisRef		:=ADR(Z_Axis);

		Step := E_Step.Idel;

	E_Step.Idel:
		IF TwinSAFEGroupState=1 AND NOT AxisInError THEN
			IF rtStart.Q THEN
				Step := E_Step.Enable;
			ELSIF rtReset.Q THEN
				Step := E_Step.Reset;
			ELSIF AxisInError THEN
				Step := E_Step.Error;
			END_IF
		ELSE
			Step := E_Step.Error;
		END_IF
		

	E_Step.Enable:
		IF TwinSAFEGroupState=1 THEN
			Step := E_Step.MoveToHome;
		ELSIF AxisInError OR TwinSAFEGroupState<>1 THEN
			Step := E_Step.Error;
		END_IF

	E_Step.MoveToHome:
		StepToReturnToAfterStop:=Step;
		fbMoveCarrier.SetPoint := HomePosSetPoint;
		fbMoveCarrier(Execute := TRUE);

		IF fbMoveCarrier.Done THEN
			fbMoveCarrier(Execute := FALSE);
			Step := E_Step.WaitForAToBeReady;
		ELSIF fbMoveCarrier.Error THEN
			Step := E_Step.Error;
		END_IF

	E_Step.WaitForAToBeReady:
		StepToReturnToAfterStop:=Step;
		IF M_ProcessDelay(WaitTimeForAToBeReady) THEN
			Step := E_Step.MoveToAPickPos;
		END_IF

	E_Step.MoveToAPickPos:
		StepToReturnToAfterStop:=Step;
		fbMoveCarrier.SetPoint := APickPosSetPoint;
		fbMoveCarrier(Execute := TRUE);

		IF fbMoveCarrier.Done THEN
			fbMoveCarrier(Execute := FALSE);
			Step := E_Step.PickFromA;
		ELSIF fbMoveCarrier.Error THEN
			Step := E_Step.Error;
		END_IF

	E_Step.PickFromA:
		StepToReturnToAfterStop:=Step;
		IF M_CloseGripper() THEN
			Step := E_Step.MoveToBWaitPos;
		END_IF

	E_Step.MoveToBWaitPos:
		StepToReturnToAfterStop:=Step;
		fbMoveCarrier.SetPoint := BWaitPosSetpoint;
		fbMoveCarrier(Execute := TRUE);

		IF fbMoveCarrier.Done THEN
			fbMoveCarrier(Execute := FALSE);
			Step := E_Step.WaitForBToBeReady;
		ELSIF fbMoveCarrier.Error THEN
			Step := E_Step.Error;
		END_IF

	E_Step.WaitForBToBeReady:
		StepToReturnToAfterStop:=Step;
		IF M_ProcessDelay(WaitTimeForBtoBeReady) THEN
			Step := E_Step.MoveToBPlacePosition;
		END_IF

	E_Step.MoveToBPlacePosition:
		StepToReturnToAfterStop:=Step;
		fbMoveCarrier.SetPoint := BPlacePosSetPoint;
		fbMoveCarrier(Execute := TRUE);

		IF fbMoveCarrier.Done THEN
			fbMoveCarrier(Execute := FALSE);
			Step := E_Step.PlaceOnB;
		ELSIF fbMoveCarrier.Error THEN
			Step := E_Step.Error;
		END_IF

	E_Step.PlaceOnB:
		StepToReturnToAfterStop:=Step;
		IF M_OpenGripper() THEN
			Step := E_Step.MoveToBWorkPos;
		END_IF

	E_Step.MoveToBWorkPos:
		StepToReturnToAfterStop:=Step;
		fbMoveCarrier.SetPoint := BWorkPosSetPoint;
		fbMoveCarrier(Execute := TRUE);

		IF fbMoveCarrier.Done THEN
			fbMoveCarrier(Execute := FALSE);
			Step := E_Step.BDoingWork;
		ELSIF fbMoveCarrier.Error THEN
			Step := E_Step.Error;
		END_IF

	E_Step.BDoingWork:
		StepToReturnToAfterStop:=Step;
		IF M_ProcessDelay(BDoingWorkTime) THEN
			Step := E_Step.MoveToBPickPos;
		END_IF

	E_Step.MoveToBPickPos:
		StepToReturnToAfterStop:=Step;
		fbMoveCarrier.SetPoint := BPickPosSetPoint;
		fbMoveCarrier(Execute := TRUE);

		IF fbMoveCarrier.Done THEN
			fbMoveCarrier(Execute := FALSE);
			Step := E_Step.PickPartFromB;
		ELSIF fbMoveCarrier.Error THEN
			Step := E_Step.Error;
		END_IF

	E_Step.PickPartFromB:
		StepToReturnToAfterStop:=Step;
		IF M_CloseGripper() THEN
			Step := E_Step.MoveToCWaitPos;
		END_IF

	E_Step.MoveToCWaitPos:
		StepToReturnToAfterStop:=Step;
		fbMoveCarrier.SetPoint := CWaitPosSetPoint;
		fbMoveCarrier(Execute := TRUE);

		IF fbMoveCarrier.Done THEN
			fbMoveCarrier(Execute := FALSE);
			Step := E_Step.WaitForCToBeReady;
		ELSIF fbMoveCarrier.Error THEN
			Step := E_Step.Error;
		END_IF

	E_Step.WaitForCToBeReady:
		StepToReturnToAfterStop:=Step;
		IF M_ProcessDelay(WaitTimeForCtoBeReady) THEN
			Step := E_Step.MoveToCPlacePos;
		END_IF

	E_Step.MoveToCPlacePos:
		StepToReturnToAfterStop:=Step;
		fbMoveCarrier.SetPoint := CPlacePosSetPoint;
		fbMoveCarrier(Execute := TRUE);

		IF fbMoveCarrier.Done THEN
			fbMoveCarrier(Execute := FALSE);
			Step := E_Step.PlaceOnC;
		ELSIF fbMoveCarrier.Error THEN
			Step := E_Step.Error;
		END_IF

	E_Step.PlaceOnC:
		StepToReturnToAfterStop:=Step;
		IF M_OpenGripper() THEN
			Step := E_Step.MoveToCWorkPos;
		END_IF

	E_Step.MoveToCWorkPos:
		StepToReturnToAfterStop:=Step;
		fbMoveCarrier.SetPoint := CWorkPosSetPoint;
		fbMoveCarrier(Execute := TRUE);

		IF fbMoveCarrier.Done THEN
			fbMoveCarrier(Execute := FALSE);
			Step := E_Step.CDoingWork;
		ELSIF fbMoveCarrier.Error THEN
			Step := E_Step.Error;
		END_IF

	E_Step.CDoingWork:
		StepToReturnToAfterStop:=Step;
		IF M_ProcessDelay(CDoingWorkTime) THEN
			IF Mode = E_Mode.Auto THEN
				Step := E_Step.MoveToHome;
			ELSIF Mode = E_Mode.Manual THEN
				Step := E_Step.Idel;
			END_IF
		END_IF
		
	E_Step.Stopping:
		fbCarrierStop(Execute:=TRUE);
		IF fbCarrierStop.Done THEN
			fbCarrierStop(Execute:=FALSE);
			Step := E_Step.Stopped;
		ELSIF fbCarrierStop.Error THEN
			Step := E_Step.Error;
		END_IF
		
	E_Step.Stopped:
		IF rtStart.Q THEN
			fbMoveCarrier(Execute:=FALSE);
			Step 		:= StepToReturnToAfterStop;
		END_IF
		
	E_Step.Error:
		IF rtReset.Q THEN
			Step := E_Step.Reseting;
			TwinSAFEGroupErrAck:=TRUE;
		END_IF

	E_Step.Reseting:
		fbCarrierReset(Execute := TRUE);
		TwinSAFEGroupErrAck:=FALSE;
		IF NOT fbCarrierReset.Busy THEN
			fbCarrierReset(Execute := FALSE);
			Step := E_Step.Init;
		END_IF

END_CASE

M_AxisPower();

//Start
CASE Step OF	
	E_Step.Init:
		Start.LED:=FALSE;
	E_Step.Idel:
		StartLEDBlink.TIMEHIGH:=T#1S;
		StartLEDBlink.TIMELOW:=T#1S;
		Start.LED:=StartLEDBlink.out;
	E_Step.Enable:
		StartLEDBlink.TIMEHIGH:=T#500MS;
		StartLEDBlink.TIMELOW:=T#500MS;
		Start.LED:=StartLEDBlink.out;
	E_Step.MoveToHome..E_Step.CDoingWork:
		Start.LED:=TRUE;
	E_Step.Stopping:
		Start.LED:=FALSE;
	E_Step.Stopped:
		StartLEDBlink.TIMEHIGH:=T#200MS;
		StartLEDBlink.TIMELOW:=T#200MS;
		Start.LED:=StartLEDBlink.out;		
	E_Step.Error..E_Step.Reseting:
		Start.LED:=FALSE;
END_CASE
StartLEDBlink(ENABLE:=TRUE);
 
 
 //Reset
CASE Step OF	
	E_Step.Init..E_Step.CDoingWork:
		Reset.LED:=FALSE;
	E_Step.Error:
		ResetLEDBlink.TIMEHIGH:=T#1S;
		ResetLEDBlink.TIMELOW:=T#1S;
		Reset.LED:=ResetLEDBlink.OUT;
	E_Step.Reset..E_Step.Reseting:
		ResetLEDBlink.TIMEHIGH:=T#500MS;
		ResetLEDBlink.TIMELOW:=T#500MS;
		Reset.LED:=ResetLEDBlink.OUT;		
END_CASE	
  ResetLEDBlink(ENABLE:=TRUE);
  
  
 //Stop
CASE Step OF
	E_Step.Init..E_Step.Enable:
		Stop.LED:=FALSE;
	E_Step.MoveToHome..E_Step.CDoingWork:
		IF rtStop.Q THEN
			Step:=E_Step.Stopping;
		END_IF
		Stop.LED:=TRUE;
	E_Step.Stopping:
		StopLEDBlink.TIMEHIGH:=T#500MS;
		StopLEDBlink.TIMELOW:=T#500MS;
		Stop.LED:=StopLEDBlink.OUT;
	E_Step.Stopped..E_Step.Reseting:
		Stop.LED:=FALSE;
END_CASE

StopLEDBlink(ENABLE:=TRUE);

]]></ST>
    </Implementation>
    <Method Name="M_AxisPower" Id="{677ce463-30f2-4570-893a-c6b140cbb6b7}">
      <Declaration><![CDATA[METHOD M_AxisPower : BOOL
VAR_INPUT
END_VAR
VAR_INST
	X_Power	: MC_Power;
	Z_Power	: MC_Power;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[X_Power(Axis			:= X_Axis,
		Enable			:= TRUE,
		Enable_Positive	:= TRUE,
		Enable_Negative	:= TRUE,
		Override		:= 100.0);

Z_Power(Axis			:= Z_Axis,
		Enable			:= TRUE,
		Enable_Positive	:= TRUE,
		Enable_Negative	:= TRUE,
		Override		:= 100.0);

X_Axis.ReadStatus();
Z_Axis.ReadStatus();

AxisInError := X_Axis.Status.Error OR Z_Axis.Status.Error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CloseGripper" Id="{bb5f6fbc-361e-4823-9fe0-7bae5c45e5a8}">
      <Declaration><![CDATA[METHOD M_CloseGripper : BOOL
VAR_INPUT
END_VAR

VAR_INST
	tonDelay : TON;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[tonDelay(IN := TRUE, PT := T#200MS);

Machine_D_Carrier_Gripper := TRUE;

IF tonDelay.Q THEN
	tonDelay(IN := FALSE);
	M_CloseGripper := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_OpenGripper" Id="{bc5ae333-e81c-4a39-98d0-d42ee8d75e01}">
      <Declaration><![CDATA[METHOD M_OpenGripper : BOOL
VAR_INPUT
END_VAR
VAR_INST
	tonDelay : TON;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[tonDelay(IN := TRUE, PT := T#200MS);
Machine_D_Carrier_Gripper := FALSE;

IF tonDelay.Q THEN
	tonDelay(IN := FALSE);
	M_OpenGripper := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ProcessDelay" Id="{3395a5bb-7516-43c6-b5c3-a43eefaec935}">
      <Declaration><![CDATA[METHOD M_ProcessDelay : BOOL
VAR_INPUT
	pt : TIME;
END_VAR
VAR_INST
	tonDelay : TON;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[tonDelay(IN := TRUE, PT := pt, Q =>, ET =>);

IF tonDelay.Q THEN
	M_ProcessDelay := TRUE;
	tonDelay(IN := FALSE, PT := pt, Q =>, ET =>);
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Machine">
      <LineId Id="3370" Count="0" />
      <LineId Id="3372" Count="254" />
      <LineId Id="3732" Count="2" />
      <LineId Id="3736" Count="1" />
      <LineId Id="3735" Count="0" />
      <LineId Id="3627" Count="26" />
      <LineId Id="3728" Count="2" />
      <LineId Id="3654" Count="1" />
      <LineId Id="3722" Count="1" />
      <LineId Id="3656" Count="0" />
      <LineId Id="3726" Count="1" />
      <LineId Id="3657" Count="0" />
      <LineId Id="3725" Count="0" />
      <LineId Id="3724" Count="0" />
      <LineId Id="3658" Count="0" />
      <LineId Id="2952" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_AxisPower">
      <LineId Id="49" Count="10" />
      <LineId Id="62" Count="3" />
      <LineId Id="41" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_CloseGripper">
      <LineId Id="31" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_OpenGripper">
      <LineId Id="31" Count="5" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_ProcessDelay">
      <LineId Id="22" Count="4" />
      <LineId Id="13" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>