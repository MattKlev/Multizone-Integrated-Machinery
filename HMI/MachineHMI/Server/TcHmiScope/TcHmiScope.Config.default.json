{
    "CHUNKSIZE": 1048576,
    "COMPRESSION": true,
    "TIMEOUT": "PT5S",
    "scopeConfigs": {
        "AxisAndEncoderPos": {
            "AUTOSTART_RECORD": true,
            "CONFIG_FILE": "﻿<?xml version="1.0" encoding="utf-8"?>
<ScopeProject AssemblyName="TwinCAT.Measurement.Scope.API.Model">
  <AutoDeleteCapacity>0</AutoDeleteCapacity>
  <AutoDeleteMode>Disabled</AutoDeleteMode>
  <AutoDeleteOlderThan>0</AutoDeleteOlderThan>
  <AutoRestartRecord>false</AutoRestartRecord>
  <AutoSaveExportConfigurationString>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;ExportConfiguration&gt;
  &lt;Silent&gt;False&lt;/Silent&gt;
  &lt;Format_Properties&gt;
    &lt;CSVProperties&gt;
    &lt;/CSVProperties&gt;
  &lt;/Format_Properties&gt;
&lt;/ExportConfiguration&gt;
</AutoSaveExportConfigurationString>
  <AutoSaveFileNameMask>{SCOPE}_AutoSave_{HH_mm_ss}</AutoSaveFileNameMask>
  <AutoSaveMode>None</AutoSaveMode>
  <AutoSavePath>$ScopeProject$\AutoSave</AutoSavePath>
  <Comment />
  <DisplayColor>Black</DisplayColor>
  <Guid>e40f2e98-6c01-4fb2-8731-ee70bdf0bd5d</Guid>
  <HeadlessServer />
  <HeadlessServerConnectionId>00000000-0000-0000-0000-000000000000</HeadlessServerConnectionId>
  <ImageAutoDeleteCapacity>0</ImageAutoDeleteCapacity>
  <ImageAutoDeleteOlderThan>0</ImageAutoDeleteOlderThan>
  <ImagesDeleteMode>Disabled</ImagesDeleteMode>
  <KeepPreviousExports>true</KeepPreviousExports>
  <KeepPreviousImageExports>true</KeepPreviousImageExports>
  <Layout>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Layout&gt;
  &lt;Window Guid="4c0ca1b4-3daf-4ae0-8b53-15da3870fa31" LastFocused="133379849890036315" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="1d1674dd-2f6e-4b9e-8bac-7db75b4dded6" DocumentIndexInWindowGroup="0" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;DocumentContainer Dock="5"&gt;
    &lt;SplitLayoutSystem WorkingSize="250, 400" SplitMode="0"&gt;
      &lt;ControlLayoutSystem WorkingSize="250, 400" Guid="1d1674dd-2f6e-4b9e-8bac-7db75b4dded6" Collapsed="0" SelectedControl="4c0ca1b4-3daf-4ae0-8b53-15da3870fa31"&gt;
        &lt;Controls&gt;
          &lt;Control Guid="4c0ca1b4-3daf-4ae0-8b53-15da3870fa31" /&gt;
        &lt;/Controls&gt;
      &lt;/ControlLayoutSystem&gt;
    &lt;/SplitLayoutSystem&gt;
  &lt;/DocumentContainer&gt;
&lt;/Layout&gt;</Layout>
  <MainServer>127.0.0.1.1.1</MainServer>
  <Name>Scope Project</Name>
  <RecordTime>6000000000</RecordTime>
  <ServerVersions>
    <Version>3.4.3147.18</Version>
  </ServerVersions>
  <SortPriority>100</SortPriority>
  <StopMode>ClientStop</StopMode>
  <SubMember>
    <DataPool AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>ecfd0e1a-43f0-49fb-9f75-ef980b0f86ac</Guid>
      <Name>DataPool</Name>
      <SortPriority>0</SortPriority>
      <SubMember>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.42.87.238.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>700ce1ba-0846-441b-9cfb-f57e36df48d9</Guid>
          <IndexGroup>16641</IndexGroup>
          <IndexOffset>65538</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>Axes.X.ActPos</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Axes.X.ActPos</SymbolName>
          <TargetPort>501</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_41</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.42.87.238.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>e5836aaa-7fb6-46e2-ab94-e39fe2ca2554</Guid>
          <IndexGroup>16642</IndexGroup>
          <IndexOffset>65538</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>Axes.Z.ActPos</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Axes.Z.ActPos</SymbolName>
          <TargetPort>501</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_41</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.42.87.238.1.1</AmsNetId>
          <Area>Output</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>UINT16</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>c3c0e80c-5d16-4d6b-bd5c-d1057c1e345c</Guid>
          <IndexGroup>61488</IndexGroup>
          <IndexOffset>135</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>Carrier X Safety Encoder (EL5101-0090)</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Carrier X Safety Encoder (EL5101-0090).Module 1 (EL5101-0090).TSC Inputs.TSC.Counter value</SymbolName>
          <TargetPort>27908</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_41</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>2</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.42.87.238.1.1</AmsNetId>
          <Area>Output</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>UINT16</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>259a7710-41f1-4370-b9fc-9a61636a450e</Guid>
          <IndexGroup>61488</IndexGroup>
          <IndexOffset>148</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>Carrier Z Safety Encoder (EL5101-0090)</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Carrier Z Safety Encoder (EL5101-0090).Module 1 (EL5101-0090).TSC Inputs.TSC.Counter value</SymbolName>
          <TargetPort>27908</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_41</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>2</VariableSize>
        </AdsAcquisition>
      </SubMember>
      <Title>DataPool_18</Title>
    </DataPool>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-1118478</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-14803426</ForeColor>
      <Guid>4c0ca1b4-3daf-4ae0-8b53-15da3870fa31</Guid>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>X and Z Position</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>10</SortPriority>
      <SubMember>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>76ccb2a9-01ba-4a3d-ab3f-49df23fd1c37</Guid>
          <Name>NC Act Pos</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>fb8a05bb-a3dd-40e4-8656-c5d1251dc9d8</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>5ed0eb11-ce10-4db7-bb49-e34c18e35d4a</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (1)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_22</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>7c01d8c4-38b6-4604-b91c-788bb492eecb</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>6336aa33-561a-42c3-820a-196e3114aeea</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style</Name>
                  <Precision>6</Precision>
                  <ShowName>Name</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_24</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>3d69565a-e00f-4217-b9d6-9350970722ca</Guid>
              <Name>Marker Container</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MarkerContainer_25</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16744448</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>7ca0aea0-03bc-4083-892a-f326b4cfa526</Guid>
              <Name>X_Axis.ActPos</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>700ce1ba-0846-441b-9cfb-f57e36df48d9</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>33623df7-7d33-46b0-a2a7-053007d55bdb</Guid>
                  <Name>Y: Axes.X.ActPos</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>1</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_45</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>16a8ee33-d9e1-436b-b73d-63535e02d99a</Guid>
                  <Name>Channel Style</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16744448</DisplayColor>
                      <FillColor>838893568</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>dbd3bde5-bfbe-4b17-8d09-0eb9b93aa093</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-16744448</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_49</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>bf582cdd-e4b0-4ed8-a10c-e67f44a8a3ef</Guid>
                      <Name>Min/Max Style</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_50</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>72d09dab-dc8f-4602-89d1-107a776cba16</Guid>
                      <Name>TimeShiftStyle_51</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_51</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_47</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_43</Title>
            </Channel>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16776961</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>bfba26be-c287-4c26-9e74-cf5ada09d821</Guid>
              <Name>Z_Axis.ActPos</Name>
              <SortPriority>11</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>e5836aaa-7fb6-46e2-ab94-e39fe2ca2554</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>a6c1eea7-0792-463c-973d-014e3d476a95</Guid>
                  <Name>Y: Axes.Z.ActPos</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>1</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_45</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>9466a108-0760-4284-b98b-308106272251</Guid>
                  <Name>Channel Style (1)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16776961</DisplayColor>
                      <FillColor>838861055</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>f70fe537-d07e-41e0-82f4-401f228eecae</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-16776961</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (1)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_49</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>e0739246-6fde-4b94-a726-c74282915581</Guid>
                      <Name>Min/Max Style (1)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_57</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>b8879062-b647-4d46-8b5a-9c8e12bddb76</Guid>
                      <Name>TimeShiftStyle_58</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_58</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_47</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_43</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <ForeColor>-14803426</ForeColor>
          <Guid>4a6e25a0-85d5-422f-b64b-34248f70f4d2</Guid>
          <Name>Overview Chart</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>OverviewChart_26</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>759d7998-6555-4d21-bc2f-8a5b1fd71825</Guid>
          <Name>Chart Style</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>true</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>343b5227-22a6-4d3d-862c-8496d64202dd</Guid>
              <Name>Chartzoom Style</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>ChartZoomStyle_28</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>8e660369-82e8-4ad5-bd28-bb26d392b12b</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>ChartMenuStyle_29</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>ChartStyle_27</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>466e8410-e9c5-4455-87ab-ee020dda73bd</Guid>
          <Name>Marker Container (1)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MarkerContainer_31</Title>
        </MarkerContainer>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>d991cb5b-8b59-4bd7-b2fd-a0f3ef348611</Guid>
          <Name>EL5101 Counts</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>11</SortPriority>
          <SubMember>
            <RefGuid-TimeAxis>fb8a05bb-a3dd-40e4-8656-c5d1251dc9d8</RefGuid-TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>40672872-a987-414d-adf0-09bdd044970b</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis (1)</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>6995d0bd-b3cd-4715-9a56-3a6540eb264d</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (2)</Name>
                  <Precision>6</Precision>
                  <ShowName>Name</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_38</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>28a0b04d-8301-435c-9824-ef549f2c11c4</Guid>
              <Name>Marker Container (2)</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MarkerContainer_39</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16711936</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>7aa6ebe6-87fa-4f83-8866-656d24443235</Guid>
              <Name>X Encoder (EL5101-0090)</Name>
              <SortPriority>11</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>c3c0e80c-5d16-4d6b-bd5c-d1057c1e345c</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>53d662d0-6d84-4702-a091-9bd21b44b4f1</Guid>
                  <Name>Y: Carrier X Safety Encoder (EL5101-0090)</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>1</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_45</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>793afce7-d552-4a15-8bb0-c853a0d692e3</Guid>
                  <Name>Channel Style (3)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16711936</DisplayColor>
                      <FillColor>838926080</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>f5577e70-435b-4e7b-8455-b02fb627af6e</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-16711936</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (3)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_49</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>750fb7ec-4418-4609-a76b-36e8d3c370f9</Guid>
                      <Name>Min/Max Style (3)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_71</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>3ccb3431-2cd8-49ea-b17f-e79a5a6ebaf5</Guid>
                      <Name>TimeShiftStyle_72</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_72</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_47</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_43</Title>
            </Channel>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-14774017</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>2d478a1c-a670-4cb1-8a22-d18a7e7cd896</Guid>
              <Name>Z Encoder (EL5101-0090)</Name>
              <SortPriority>12</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>259a7710-41f1-4370-b9fc-9a61636a450e</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>1a0c3e37-bacd-49de-b6cd-67791f201483</Guid>
                  <Name>Y: Carrier Z Safety Encoder (EL5101-0090)</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>1</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_45</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>808d13a3-f706-4e39-bfcf-dc95183b2df3</Guid>
                  <Name>Channel Style (4)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-14774017</DisplayColor>
                      <FillColor>840863999</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>1bd17e65-0643-492c-af35-ca61fbb5ea4e</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-14774017</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (4)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_49</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>6f060e8b-2a79-4fd0-a61c-c9c162032569</Guid>
                      <Name>Min/Max Style (4)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_78</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>8b2c66c2-e76d-4471-9007-a9e97fe0429c</Guid>
                      <Name>TimeShiftStyle_79</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_79</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_47</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_43</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>YTChart_19</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <TriggerModule AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>61da6379-7405-449a-a94f-77528c487c9f</Guid>
      <Name>Trigger</Name>
      <SortPriority>10000</SortPriority>
      <SubMember />
      <Title>TriggerModule_30</Title>
    </TriggerModule>
  </SubMember>
  <SynchronisationMode>Default</SynchronisationMode>
  <TargetConnectionIds />
  <Title>ScopeProject_3</Title>
  <UseAutoSave>false</UseAutoSave>
  <UseFileStore>true</UseFileStore>
  <Version>1.0.0.3</Version>
  <ViewDetailLevel>Default</ViewDetailLevel>
</ScopeProject>",
            "CONFIG_PATH": "../HmiScope/YT Scope Project.tcscopex",
            "CONFIG_SOURCE": "project"
        }
    },
    "scopeRecords": []
}