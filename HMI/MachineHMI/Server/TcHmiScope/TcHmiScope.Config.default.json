{
    "CHUNKSIZE": 1048576,
    "COMPRESSION": true,
    "TIMEOUT": "PT5S",
    "scopeConfigs": {
        "XAxisScope": {
            "AUTOSTART_RECORD": true,
            "CONFIG_FILE": "﻿<?xml version="1.0" encoding="utf-8"?>
<ScopeProject AssemblyName="TwinCAT.Measurement.Scope.API.Model">
  <AutoDeleteCapacity>0</AutoDeleteCapacity>
  <AutoDeleteMode>Disabled</AutoDeleteMode>
  <AutoDeleteOlderThan>0</AutoDeleteOlderThan>
  <AutoRestartRecord>true</AutoRestartRecord>
  <AutoSaveExportConfigurationString>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;ExportConfiguration&gt;
  &lt;Silent&gt;False&lt;/Silent&gt;
  &lt;Format_Properties&gt;
    &lt;CSVProperties&gt;
    &lt;/CSVProperties&gt;
  &lt;/Format_Properties&gt;
&lt;/ExportConfiguration&gt;
</AutoSaveExportConfigurationString>
  <AutoSaveFileNameMask>{SCOPE}_AutoSave_{HH_mm_ss}</AutoSaveFileNameMask>
  <AutoSaveMode>None</AutoSaveMode>
  <AutoSavePath>$ScopeProject$\AutoSave</AutoSavePath>
  <Comment />
  <DisplayColor>Black</DisplayColor>
  <Guid>e40f2e98-6c01-4fb2-8731-ee70bdf0bd5d</Guid>
  <HeadlessServer />
  <HeadlessServerConnectionId>00000000-0000-0000-0000-000000000000</HeadlessServerConnectionId>
  <ImageAutoDeleteCapacity>0</ImageAutoDeleteCapacity>
  <ImageAutoDeleteOlderThan>0</ImageAutoDeleteOlderThan>
  <ImagesDeleteMode>Disabled</ImagesDeleteMode>
  <KeepPreviousExports>true</KeepPreviousExports>
  <KeepPreviousImageExports>true</KeepPreviousImageExports>
  <Layout>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Layout&gt;
  &lt;Window Guid="4c0ca1b4-3daf-4ae0-8b53-15da3870fa31" LastFocused="133380735685143582" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="1d1674dd-2f6e-4b9e-8bac-7db75b4dded6" DocumentIndexInWindowGroup="0" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;DocumentContainer Dock="5"&gt;
    &lt;SplitLayoutSystem WorkingSize="250, 400" SplitMode="0"&gt;
      &lt;ControlLayoutSystem WorkingSize="250, 400" Guid="1d1674dd-2f6e-4b9e-8bac-7db75b4dded6" Collapsed="0" SelectedControl="4c0ca1b4-3daf-4ae0-8b53-15da3870fa31"&gt;
        &lt;Controls&gt;
          &lt;Control Guid="4c0ca1b4-3daf-4ae0-8b53-15da3870fa31" /&gt;
        &lt;/Controls&gt;
      &lt;/ControlLayoutSystem&gt;
    &lt;/SplitLayoutSystem&gt;
  &lt;/DocumentContainer&gt;
&lt;/Layout&gt;</Layout>
  <MainServer>127.0.0.1.1.1</MainServer>
  <Name>Scope Project</Name>
  <RecordTime>36000000000</RecordTime>
  <ServerVersions>
    <Version>3.4.3147.18</Version>
  </ServerVersions>
  <SortPriority>100</SortPriority>
  <StopMode>ClientStop</StopMode>
  <SubMember>
    <DataPool AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>ecfd0e1a-43f0-49fb-9f75-ef980b0f86ac</Guid>
      <Name>DataPool</Name>
      <SortPriority>0</SortPriority>
      <SubMember>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.42.87.238.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>700ce1ba-0846-441b-9cfb-f57e36df48d9</Guid>
          <IndexGroup>16641</IndexGroup>
          <IndexOffset>65538</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>Axes.X.ActPos</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Axes.X.ActPos</SymbolName>
          <TargetPort>501</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_41</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.42.87.238.1.1</AmsNetId>
          <Area>Output</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>UINT16</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>a2f3675f-3e04-4e71-850c-794ea592c7b3</Guid>
          <IndexGroup>61488</IndexGroup>
          <IndexOffset>135</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>TSC.Counter value</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Carrier X Safety Encoder (EL5001-0090).Module 1 (EL5001-0090).TSC Slave Message.TSC.Counter value</SymbolName>
          <TargetPort>27908</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_58</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>2</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.42.87.238.1.1</AmsNetId>
          <Area>Output</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>UINT32</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>0</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>ad36e1ef-3653-4598-97aa-bf3360c0d283</Guid>
          <IndexGroup>61488</IndexGroup>
          <IndexOffset>130</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>SSI Inputs.Counter value</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Carrier X Safety Encoder (EL5001-0090).SSI Inputs.Counter value</SymbolName>
          <TargetPort>27908</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_58</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>4</VariableSize>
        </AdsAcquisition>
      </SubMember>
      <Title>DataPool_18</Title>
    </DataPool>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-1118478</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-14803426</ForeColor>
      <Guid>4c0ca1b4-3daf-4ae0-8b53-15da3870fa31</Guid>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>X Axis</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>10</SortPriority>
      <SubMember>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>76ccb2a9-01ba-4a3d-ab3f-49df23fd1c37</Guid>
          <Name>NC Act Pos</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>fb8a05bb-a3dd-40e4-8656-c5d1251dc9d8</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>5ed0eb11-ce10-4db7-bb49-e34c18e35d4a</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (1)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_22</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>7c01d8c4-38b6-4604-b91c-788bb492eecb</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>6336aa33-561a-42c3-820a-196e3114aeea</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style</Name>
                  <Precision>6</Precision>
                  <ShowName>Name</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_24</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>3d69565a-e00f-4217-b9d6-9350970722ca</Guid>
              <Name>Marker Container</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MarkerContainer_25</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16744448</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>7ca0aea0-03bc-4083-892a-f326b4cfa526</Guid>
              <Name>X_Axis.ActPos</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>700ce1ba-0846-441b-9cfb-f57e36df48d9</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>33623df7-7d33-46b0-a2a7-053007d55bdb</Guid>
                  <Name>Y: Axes.X.ActPos</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>1</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_45</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>16a8ee33-d9e1-436b-b73d-63535e02d99a</Guid>
                  <Name>Channel Style</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16744448</DisplayColor>
                      <FillColor>838893568</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>dbd3bde5-bfbe-4b17-8d09-0eb9b93aa093</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-16744448</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style</Name>
                      <SeriesType>ExtendedLine</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_49</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>bf582cdd-e4b0-4ed8-a10c-e67f44a8a3ef</Guid>
                      <Name>Min/Max Style</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_50</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>72d09dab-dc8f-4602-89d1-107a776cba16</Guid>
                      <Name>TimeShiftStyle_51</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_51</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_47</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <DynamicStyleContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>f94c3cd8-0ec8-4d66-9235-638a6906dd30</Guid>
                  <Name>DynamicStyleContainer_51</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <DynamicStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <ApplyTo>ApplyToLineNMarkNFill</ApplyTo>
                      <Comment />
                      <DisplayColor>Green</DisplayColor>
                      <Enabled>true</Enabled>
                      <Guid>6a141e6f-fa83-47d1-a065-0fb2483d4dc6</Guid>
                      <Linestate>Colored</Linestate>
                      <LinkOptions>AND</LinkOptions>
                      <Name>Machine A</Name>
                      <SortPriority>20</SortPriority>
                      <SubMember>
                        <AreaCondition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                          <Comment />
                          <DisplayColor>Black</DisplayColor>
                          <Enabled>true</Enabled>
                          <Guid>7a829489-618c-44c6-9bc1-6af326be7fc5</Guid>
                          <InterpreterGUID>33623df7-7d33-46b0-a2a7-053007d55bdb</InterpreterGUID>
                          <LowerLimit>0</LowerLimit>
                          <LowerOperator>BiggerOrEqual</LowerOperator>
                          <Name>A Area</Name>
                          <SortPriority>10</SortPriority>
                          <SubMember />
                          <Title>AreaCondition_52</Title>
                          <UpperLimit>666.666</UpperLimit>
                          <UpperOperator>Smaller</UpperOperator>
                        </AreaCondition>
                      </SubMember>
                      <Title>DynamicStyle_50</Title>
                    </DynamicStyle>
                    <DynamicStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <ApplyTo>ApplyToLineNMarkNFill</ApplyTo>
                      <Comment />
                      <DisplayColor>Yellow</DisplayColor>
                      <Enabled>true</Enabled>
                      <Guid>32e60ced-2840-4fe9-b728-6fb72e1834b3</Guid>
                      <Linestate>Colored</Linestate>
                      <LinkOptions>AND</LinkOptions>
                      <Name>Machine B</Name>
                      <SortPriority>21</SortPriority>
                      <SubMember>
                        <AreaCondition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                          <Comment />
                          <DisplayColor>Black</DisplayColor>
                          <Enabled>true</Enabled>
                          <Guid>e6a2d0e5-a234-4b32-b7b0-9853b7b121d9</Guid>
                          <InterpreterGUID>33623df7-7d33-46b0-a2a7-053007d55bdb</InterpreterGUID>
                          <LowerLimit>666.666</LowerLimit>
                          <LowerOperator>BiggerOrEqual</LowerOperator>
                          <Name>B Area</Name>
                          <SortPriority>10</SortPriority>
                          <SubMember />
                          <Title>AreaCondition_54</Title>
                          <UpperLimit>1333.333</UpperLimit>
                          <UpperOperator>Smaller</UpperOperator>
                        </AreaCondition>
                      </SubMember>
                      <Title>DynamicStyle_53</Title>
                    </DynamicStyle>
                    <DynamicStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <ApplyTo>ApplyToLineNMarkNFill</ApplyTo>
                      <Comment />
                      <DisplayColor>-4177920</DisplayColor>
                      <Enabled>true</Enabled>
                      <Guid>0764b96c-7bee-4b1b-91b3-70bc9de7c8dd</Guid>
                      <Linestate>Colored</Linestate>
                      <LinkOptions>AND</LinkOptions>
                      <Name>Machine C</Name>
                      <SortPriority>22</SortPriority>
                      <SubMember>
                        <AreaCondition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                          <Comment />
                          <DisplayColor>Black</DisplayColor>
                          <Enabled>true</Enabled>
                          <Guid>38c2232d-42f7-4b0e-9fcc-6d80157f4d6f</Guid>
                          <InterpreterGUID>33623df7-7d33-46b0-a2a7-053007d55bdb</InterpreterGUID>
                          <LowerLimit>1333.333</LowerLimit>
                          <LowerOperator>BiggerOrEqual</LowerOperator>
                          <Name>C Area</Name>
                          <SortPriority>10</SortPriority>
                          <SubMember />
                          <Title>AreaCondition_56</Title>
                          <UpperLimit>2000</UpperLimit>
                          <UpperOperator>Smaller</UpperOperator>
                        </AreaCondition>
                      </SubMember>
                      <Title>DynamicStyle_55</Title>
                    </DynamicStyle>
                  </SubMember>
                  <Title>DynamicStyleContainer_51</Title>
                </DynamicStyleContainer>
              </SubMember>
              <Title>Channel_43</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <ForeColor>-14803426</ForeColor>
          <Guid>4a6e25a0-85d5-422f-b64b-34248f70f4d2</Guid>
          <Name>Overview Chart</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>OverviewChart_26</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>759d7998-6555-4d21-bc2f-8a5b1fd71825</Guid>
          <Name>Chart Style</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>true</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>343b5227-22a6-4d3d-862c-8496d64202dd</Guid>
              <Name>Chartzoom Style</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>ChartZoomStyle_28</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>8e660369-82e8-4ad5-bd28-bb26d392b12b</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>ChartMenuStyle_29</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>false</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>ChartStyle_27</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>466e8410-e9c5-4455-87ab-ee020dda73bd</Guid>
          <Name>Marker Container (1)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MarkerContainer_31</Title>
        </MarkerContainer>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>d991cb5b-8b59-4bd7-b2fd-a0f3ef348611</Guid>
          <Name>EL5001 Counts</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>11</SortPriority>
          <SubMember>
            <RefGuid-TimeAxis>fb8a05bb-a3dd-40e4-8656-c5d1251dc9d8</RefGuid-TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>40672872-a987-414d-adf0-09bdd044970b</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis (1)</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>6995d0bd-b3cd-4715-9a56-3a6540eb264d</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (2)</Name>
                  <Precision>6</Precision>
                  <ShowName>Name</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_38</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>28a0b04d-8301-435c-9824-ef549f2c11c4</Guid>
              <Name>Marker Container (2)</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MarkerContainer_39</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16776961</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>b7200130-f0d3-4513-b175-08e919ae0058</Guid>
              <Name>TSC.Counter value</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>a2f3675f-3e04-4e71-850c-794ea592c7b3</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>681768db-7c51-4ccb-a2f2-638b982c1ee2</Guid>
                  <Name>Y: TSC.Counter value</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>1</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_62</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>fd8cfa8f-87ab-47b0-ab46-2a88f5a4f1ed</Guid>
                  <Name>Channel Style (1)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16776961</DisplayColor>
                      <FillColor>838861055</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>be609e6a-fc7e-403f-a472-def316f0ebae</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-16776961</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (1)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_66</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>6d4a01c8-fd39-4a81-a48f-8e237b8c23f0</Guid>
                      <Name>Min/Max Style (1)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_67</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>bcdf918b-6295-4fb2-b2ad-5961ba40c6ab</Guid>
                      <Name>TimeShiftStyle_68</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_68</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_64</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_60</Title>
            </Channel>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-23296</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>841896d4-b598-49e3-beae-681479744d13</Guid>
              <Name>SSI Inputs.Counter value</Name>
              <SortPriority>11</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>ad36e1ef-3653-4598-97aa-bf3360c0d283</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>c60192c0-4f8f-45aa-951f-a59cd4e663dd</Guid>
                  <Name>Y: SSI Inputs.Counter value</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>1</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_62</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>da13093e-9330-4965-b17b-d0a635d4105d</Guid>
                  <Name>Channel Style (2)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-23296</DisplayColor>
                      <FillColor>855614720</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>38e30c73-2bcf-48ad-9d63-cff967ea78f5</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-23296</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (2)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_66</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>fd294ef1-ce60-45b8-8dbc-4e42fd4d4958</Guid>
                      <Name>Min/Max Style (2)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_74</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>21aacbc9-4087-486b-8ac4-3881b6cd7b50</Guid>
                      <Name>TimeShiftStyle_75</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_75</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_64</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_60</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>YTChart_19</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <TriggerModule AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>61da6379-7405-449a-a94f-77528c487c9f</Guid>
      <Name>Trigger</Name>
      <SortPriority>10000</SortPriority>
      <SubMember />
      <Title>TriggerModule_30</Title>
    </TriggerModule>
  </SubMember>
  <SynchronisationMode>Default</SynchronisationMode>
  <TargetConnectionIds />
  <Title>ScopeProject_3</Title>
  <UseAutoSave>false</UseAutoSave>
  <UseFileStore>false</UseFileStore>
  <Version>1.0.0.3</Version>
  <ViewDetailLevel>Default</ViewDetailLevel>
</ScopeProject>",
            "CONFIG_PATH": "../HmiScope/YT Scope Project.tcscopex",
            "CONFIG_SOURCE": "project"
        }
    },
    "scopeRecords": []
}